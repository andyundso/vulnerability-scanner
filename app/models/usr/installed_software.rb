class Usr::InstalledSoftware < ActiveRecord::Base

  self.table_name = 'usr_installed_software'

  belongs_to :system, class_name: 'Usr::System'
  belongs_to :software_version, class_name: 'Sft::Version'

  def self.insert_json_informations(json_response, system_id)
    # the date is required later
    time = Time.now

    # first, create the software objects (or get them)
    json_response.each do |hash|

      unless hash['Version'].nil?
        vendor = Sft::Vendor.where(name: hash['Publisher']).first_or_create

        if vendor.errors.any?
          Rails.logger.error version.errors.full_messages
          render nothing: true, status: 500
        else
          # software is bit different, because we need to update the infor url
          software = Sft::Software.where(vendor: vendor, name: hash['DisplayName'])

          if software.empty?
            sft = Sft::Software.create(vendor: vendor, name: hash['DisplayName'], info_url: hash['URLInfoAbout'])
          else
            software.first.update_attributes(info_url: hash['URLInfoAbout'])
            sft = software.first.reload
          end

          if sft.errors.any?
            Rails.logger.error version.errors.full_messages
            render nothing: true, status: 500
          else
            version = Sft::Version.where(software: sft, version: hash['Version']).first_or_create

            if version.errors.any?
              Rails.logger.error version.errors.full_messages
              render nothing: true, status: 500
            else
              is = Usr::InstalledSoftware.where(software_version: version, system_id: system_id)

              if is.empty?
                is = Usr::InstalledSoftware.create(software_version: version, system_id: system_id, installed: true,
                                                 installed_at: (hash['InstallDate'] ? Date.parse(hash['InstallDate']) : Date.today))
              else
                is.first.update_attributes(installed: true,
                                           installed_at: (Date.parse(hash['InstallDate']) if hash['InstallDate']))
                is = is.first.reload
              end

              if is.errors.any?
                Rails.logger.error version.errors.full_messages
                render nothing: true, status: 500
              end
            end
          end
        end
      end
    end

    # if there is any software which wasn't touch before, they should not be installed anymore
    Usr::InstalledSoftware.where("updated_at < ? AND system_id = ?", time, system_id).each do |uis|
      uis.update_attributes(installed: false)
    end
  end
end